//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Admin on 10/11/16.
//  Copyright Â© 2016 AAkash. All rights reserved.
//

import UIKit
import Messages
import Foundation

class MessagesViewController: MSMessagesAppViewController, AddMessageViewControllerDelegate {
    
    var image = UIImage()
    var caption = ""
    var sendButton = UIButton()
    
    override func viewDidLoad() {
        super.viewDidLoad()
    
    }
    
    func addMessageViewControllerDidSubmit(image: UIImage, caption: String) {
        let layout = MSMessageTemplateLayout()
        layout.image = image
        layout.caption = caption
        
        self.image = image
        self.caption = caption

        let components = NSURLComponents()
        let queryItem = URLQueryItem(name: "Message", value: caption)
        

        components.queryItems = [queryItem]
        
        let conversation = self.activeConversation
        let session = MSSession()
        let message = MSMessage(session: session)
        message.layout = layout
        message.url = components.url!
        
        conversation?.insert(message, completionHandler: { (error: Error?) in
            
        })
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    private func presentViewController(for conversation: MSConversation, with presentationStyle: MSMessagesAppPresentationStyle) {
        
        var controller: UIViewController!
        
        if presentationStyle == .compact {
            controller = instantiateAddMessageViewController()
        } else {
            
            guard let message = conversation.selectedMessage else {
                fatalError("Error occured")
            }
            
            let components = URLComponents(string: (message.url?.absoluteString)!)

            let queryItem = components?.queryItems?[0]
            
            controller = instantiateDetailViewController(message: (queryItem?.value)!)
        }
        
        addChildViewController(controller)
        
        controller.view.frame = view.bounds
        controller.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(controller.view)
        
        controller.view.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        controller.view.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
        controller.view.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        controller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        
        controller.didMove(toParentViewController: self)
    }
    
    private func instantiateAddMessageViewController()->UIViewController {
        
        guard let controller = self.storyboard?.instantiateViewController(withIdentifier: "AddMessageViewController") as? AddMessageViewController else {
            fatalError("Error")
        }
        
        controller.delegate = self
        return controller
    }
    
    private func instantiateDetailViewController(message: String)->UIViewController {
        
        guard let controller = self.storyboard?.instantiateViewController(withIdentifier: "DetailViewController") as? DetailViewController else {
            fatalError("Error")
        }
    
        controller.word = message
        
        
        return controller
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        presentViewController(for: conversation, with: presentationStyle)
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        
        guard  let conversation = activeConversation else {
            fatalError("Fatal error")
        }
        
        presentViewController(for: conversation, with: presentationStyle)
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    
}
